{
  "name": "mssqlhelper",
  "description": "Microsoft SQL Server database helper.",
  "homepage": "http://play175.github.com/mssqlhelper/",
  "keywords": [
    "mssql",
    "Helper",
    "Microsoft SQL Server",
    "SQLHelper"
  ],
  "author": {
    "name": "yoyo",
    "email": "http://yoyo.play175.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/play175/mssqlhelper.git"
  },
  "main": "index.js",
  "version": "0.2.0",
  "readme": "# nodejs Microsoft SQL Server Helper \n# nodejs的一个用于连接mssql数据库的工具类\n\n## Features 介绍\n\n * 采用微软tds协议，不需要任何C/C++扩展，跨平台使用\n * 执行sql语句，获得结果行\n * 执行存储过程，获得输出参数以及结果行\n\n## TODO 待实现内容\n\n * 将支持获得多个结果集（Table）\n * 将支持连接池\n * 更多性能加强\n\n\n## Use 使用\n    \n    $ git clone git@github.com:play175/mssqlhelper.git\n    $ cd mssqlhelper\n    $ node test.js\n\n## Test 测试代码\n\n\nvar db = require('./index');\n\ndb.config({\n    host: '192.168.1.100'\n\t,port: 1433\n\t,userName: 'sa'\n\t,password: '123'\n\t,database:'testdb'\n});\n\n//test query sql 执行sql\n\ndb.query(\n\t'select @Param1 Param1,@Param2 Param2'\n\t,{\n\t\t Param1: { type : 'NVarChar', size: 7,value : 'myvalue' }\n\t\t ,Param2: { type : 'Int',value : 321 }\n\t}\n\t,function(res){\n\t\tif(res.err)throw new Error('database error:'+res.err.msg);\n\t\tvar rows = res.tables[0].rows;\n\t\tfor (var i = 0; i < rows.length; i++) {\n\t\t\tconsole.log(rows[i].getValue(0),rows[i].getValue('Param2'));\n\t\t}\n\t}\n);\n\n//test excute sp 执行存储过程\n\ndb.exec(\n\t'test_sp'\n\t,{\n\t\t Param1: {direction:'out', type : 'NVarChar', size: 50,value : 'my Param1 value' }\n\t\t ,Param2: { type : 'Int',value : 123 }\n\t\t ,Param3: {direction:'out', type : 'VarChar', size: 50,value : '789' }\n\t}\n\t,function(res){\n\t\tif(res.err)throw new Error('database error:'+res.err.msg);\n\n\t\t//get output paramater value\n\t\tconsole.log('output @Param1='+res.params.Param1.value);\n\n\t\t//get rows\n\t\tvar rows = res.tables[0].rows;\n\t\tfor (var i = 0; i < rows.length; i++) {\n\t\t\tvar rp = '';\n\t\t\tfor(var j=0,len = rows[i].metadata.columns.length;j<len;j++){\n\t\t\t\tvar col = rows[i].metadata.columns[j];\n\t\t\t\trp += ' ' +(rows[i].getValue(j));\n\t\t\t}\n\t\t\tconsole.log(rp);\n\t\t}\n\t}\n);\n\n\n\n///////////////////////////////问题和解决方案//////////////////////////////////////\n问题/Issues：\n1：不能输出匿名列，比如select *\n2：如果不能排序，比如 select a from table oerder by b desc，目前的解决方法：\n\t;with result as(\n\t\tSELECT Actor,ActorName FROM [GameActor] order by time desc\n\t)\n\tselect * from result\n3：输出中文乱码，引发这个问题有几个方面，解决方法：\n\t（1）把所有js文件用utf-8编码保存\n\t（2）数据库中含有中文的字段，必须是unicode类型，比如varchar应该改为nvarchar\n\n4:在多进程cluster的的使用：\n\tvar db = require('./index');\t\n\tvar cluster = require('cluster');\t\n\tif (cluster.isMaster) {\n\t    var numCPUs = require('os').cpus().length;\n\t    for (var i = 0; i < numCPUs; i++) {\n\t        var worker = cluster.fork();\n\t    }\n\t} else {\n\t    db.config(..);\n\t    db.query(..);\n\t}\n\n",
  "readmeFilename": "README",
  "bugs": {
    "url": "https://github.com/play175/mssqlhelper/issues"
  },
  "_id": "mssqlhelper@0.2.0",
  "dist": {
    "shasum": "abfa53124e3d3cf265c6d35190a6c90ec0f8f367"
  },
  "_from": "mssqlhelper@",
  "_resolved": "https://registry.npmjs.org/mssqlhelper/-/mssqlhelper-0.2.0.tgz"
}
